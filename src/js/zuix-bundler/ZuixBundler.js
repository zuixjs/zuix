/*
 * Copyright 2015-2022 G-Labs. All Rights Reserved.
 *         https://zuixjs.github.io/zuix
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 *
 *  This file is part of
 *  zUIx, Javascript library for component-based development.
 *        https://zuixjs.github.io/zuix
 *
 * @author Generoso Martello  -  https://github.com/genemars
 */

'use strict';

const fileSaver = require('./FileSaver');
const serialize = require('./Serializer');
const _optionAttributes = require('../zuix/OptionAttributes');

/**
 * Create application bundle containing all components
 * and resources used in the app. This method can be called
 * from the browser developer console. When using lazy-loading
 * only components loaded so far will be bundled (incremental bundle).
 * To force inclusion of all components/resources
 * disable lazy-loading first by calling
 * `zuix.lazyLoad(false)` and then `zuix.saveBundle()`.
 * After the bundle is created it will be downloaded
 * by the browser as 'app.bundle.js' file that you can
 * then compress, copy and include in your app.
 * This will speed-up resource loading and improve
 * user experience.
 *
 * @return {string} bundle
 */
function saveBundle() {
  const bundleFileName = 'app.bundle.js';
  const bundleObj = zuix.bundle();
  let headerSummary = '\n/*';
  headerSummary += '\n * zUIx Application Bundle';
  headerSummary += '\n * ';
  headerSummary += '\n * '+bundleFileName+' generated by *zuix-bundler*';
  headerSummary += '\n *   on '+new Date().toISOString();
  headerSummary += '\n * ';
  headerSummary += '\n * Resource list ('+bundleObj.length+'):';
  headerSummary += '\n * ';
  for (let i = 0; i < bundleObj.length; i++) {
    const b = bundleObj[i];
    let ctype = '';
    if (b.view != null) {
      ctype += '[html] ';
    }
    if (b.css != null) {
      ctype += '[css] ';
    }
    if (b.controller != null) {
      ctype += '[js] ';
    }
    let cpath = b.componentId;
    if (b.using != null) {
      cpath = b.using+' ('+cpath+')';
    }
    headerSummary += '\n * - '+ctype;
    headerSummary += '\n *   '+cpath;
    headerSummary += '\n * ';
  }
  headerSummary += '\n * ';
  headerSummary += '\n*/';
  headerSummary += '\n\n';
  let bundle = headerSummary + serialize(zuix.bundle());
  // revert loaded status before exporting
  bundle = bundle.replace(new RegExp(_optionAttributes.dataUiLoaded+'="true"', 'g'),
      _optionAttributes.dataUiLoaded+'="false"');
  bundle = bundle.replace(new RegExp(_optionAttributes.zuixLoaded+'="true"', 'g'),
      _optionAttributes.zuixLoaded+'="false"');
  // save bundle
  const blob = new Blob(['zuix.bundle(' + bundle + ');'], {type: 'text/plain;charset=utf-8'});
  fileSaver.saveAs(blob, bundleFileName);
  return bundle;
}

module.exports = function(root) {
  if (zuix == null) {
    alert('Error: ZuixBundler requires Zuix to be included first.');
    return;
  }
  zuix.saveBundle = saveBundle;
  return zuix;
};
