[{"tags":[],"description":{"full":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst _log =\n    require('../helpers/Logger')('Zuix.js');\nconst util =\n    require('../helpers/Util');\nconst z$ =\n    require('../helpers/ZxQuery');\nconst TaskQueue =\n    require('../helpers/TaskQueue');\nconst ObjectObserver =\n    require('../observable/ObjectObserver');\nconst ComponentContext =\n    require('./ComponentContext');\nconst ContextController =\n    require('./ContextController');\nconst _componentizer =\n    require('./Componentizer')();\nconst _optionAttributes =\n    require('./OptionAttributes');\n\nrequire('./ComponentCache');\n\n// Custom objects definition used to generate JsDoc","ctx":false},{"tags":[{"type":"typedef","string":"{object} ContextOptions","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Object|undefined} contextId The context id. HTML attribute equivalent: `data-ui-context`.","name":"contextId","description":"The context id. HTML attribute equivalent: `data-ui-context`.","types":["Object"],"typesDescription":"<code>Object</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Element|undefined} container The container element.","name":"container","description":"The container element.","types":["Element"],"typesDescription":"<code>Element</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{JSON|undefined} model The data model.  HTML attribute equivalent: `data-bind-model`.","name":"model","description":"The data model. HTML attribute equivalent: `data-bind-model`.","types":["JSON"],"typesDescription":"<a href=\"JSON.html\">JSON</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Element|undefined} view The view element. HTML attribute equivalent: `data-ui-view`.","name":"view","description":"The view element. HTML attribute equivalent: `data-ui-view`.","types":["Element"],"typesDescription":"<code>Element</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{ContextControllerHandler|undefined} controller The controller handler.","name":"controller","description":"The controller handler.","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Array.<Object.<string, EventCallback>>|undefined} on The handling map for events.","name":"on","description":"The handling map for events.","types":["Array.<Object.<string, EventCallback>>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>.&lt;<code>string</code>, <a href=\"EventCallback.html\">EventCallback</a>&gt;&gt;|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Array.<Object.<string, EventCallback>>|undefined} behavior The handling map for behaviors.","name":"behavior","description":"The handling map for behaviors.","types":["Array.<Object.<string, EventCallback>>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>.&lt;<code>string</code>, <a href=\"EventCallback.html\">EventCallback</a>&gt;&gt;|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{Element|string|boolean|undefined} css The stylesheet of the view.","name":"css","description":"The stylesheet of the view.","types":["Element","string","boolean"],"typesDescription":"<code>Element</code>|<code>string</code>|<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean|undefined} encapsulation Whether to use style encapsulation or not.","name":"encapsulation","description":"Whether to use style encapsulation or not.","types":["boolean"],"typesDescription":"<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean|undefined} resetCss Whether to reset view style to prevent inheriting from parent containers.","name":"resetCss","description":"Whether to reset view style to prevent inheriting from parent containers.","types":["boolean"],"typesDescription":"<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{string|undefined} cext When loading content of the view, appends the specified extension instead of `.html`.","name":"cext","description":"When loading content of the view, appends the specified extension instead of `.html`.","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean|undefined} html Enables or disables HTML auto-loading (**default:** true).","name":"html","description":"Enables or disables HTML auto-loading (**default:** true).","types":["boolean"],"typesDescription":"<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{boolean|undefined} lazyLoad Enables or disables lazy-loading (**default:** false).","name":"lazyLoad","description":"Enables or disables lazy-loading (**default:** false).","types":["boolean"],"typesDescription":"<code>boolean</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{number|undefined} priority Loading priority (**default:** 0).","name":"priority","description":"Loading priority (**default:** 0).","types":["number"],"typesDescription":"<code>number</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{ContextReadyCallback|undefined} ready The ready callback, triggered once the component is succesfully loaded.","name":"ready","description":"The ready callback, triggered once the component is succesfully loaded.","types":["ContextReadyCallback"],"typesDescription":"<a href=\"ContextReadyCallback.html\">ContextReadyCallback</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"property","string":"{ContextErrorCallback|undefined} error The error callback, triggered when an error occurs.","name":"error","description":"The error callback, triggered when an error occurs.","types":["ContextErrorCallback"],"typesDescription":"<a href=\"ContextErrorCallback.html\">ContextErrorCallback</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"This object can be supplied when loading a component. It can be either passed as argument for the\n`zuix.load(...)` method in the javascript code, or in the `data-ui-options` attribute of the HTML code\nof the component container.","summary":"This object can be supplied when loading a component. It can be either passed as argument for the\n`zuix.load(...)` method in the javascript code, or in the `data-ui-options` attribute of the HTML code\nof the component container.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":52,"codeStart":75},{"tags":[{"type":"callback","string":"ContextErrorCallback"},{"type":"param","string":"{Object} error","name":"error","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ComponentContext} ctx The component context object (same as `this`).","name":"ctx","description":"The component context object (same as `this`).","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{ComponentContext}"}],"description":{"full":"Callback function triggered if an error occurs when loading a component.","summary":"Callback function triggered if an error occurs when loading a component.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":76,"codeStart":84},{"tags":[{"type":"callback","string":"ContextReadyCallback"},{"type":"param","string":"{ComponentContext} ctx The component context (same as `this`).","name":"ctx","description":"The component context (same as `this`).","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{ComponentContext}"}],"description":{"full":"Callback function triggered when a component has been successfully loaded.","summary":"Callback function triggered when a component has been successfully loaded.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":85,"codeStart":92},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"type","string":"{!Array.<ComponentContext>}","types":["Array.<ComponentContext>"],"typesDescription":"!<code>Array</code>.&lt;<a href=\"ComponentContext.html\">ComponentContext</a>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":94,"codeStart":98,"code":"const _contextRoot = [];","ctx":{"type":"declaration","name":"_contextRoot","value":"[]","string":"_contextRoot"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":99,"codeStart":100,"code":"const _hooksCallbacks = [];","ctx":{"type":"declaration","name":"_hooksCallbacks","value":"[]","string":"_hooksCallbacks"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":101,"codeStart":102,"code":"const _globalHandlers = {};","ctx":{"type":"declaration","name":"_globalHandlers","value":"{}","string":"_globalHandlers"}},{"tags":[{"type":"private","string":"*","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":103,"codeStart":104,"code":"const _componentTask = [];","ctx":{"type":"declaration","name":"_componentTask","value":"[]","string":"_componentTask"}},{"tags":[{"type":"private","string":"*","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":105,"codeStart":106,"code":"const _pendingResourceTask = {};","ctx":{"type":"declaration","name":"_pendingResourceTask","value":"{}","string":"_pendingResourceTask"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":107,"codeStart":108,"code":"const resourceLoadTask = [];","ctx":{"type":"declaration","name":"resourceLoadTask","value":"[]","string":"resourceLoadTask"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{String} tid Task id","name":"tid","description":"Task id","types":["String"],"typesDescription":"<code>String</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{TaskQueue}","types":["TaskQueue"],"typesDescription":"<a href=\"TaskQueue.html\">TaskQueue</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":109,"codeStart":114,"code":"const taskQueue = function(tid) {\n    if (util.isNoU(_componentTask[tid])) {\n        _componentTask[tid] = new TaskQueue(function(tq, eventPath, eventValue) {\n            trigger(tq, eventPath, eventValue);\n        });\n    }\n    return _componentTask[tid];\n};","ctx":{"type":"function","name":"taskQueue","string":"taskQueue()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"type","string":"{!Array.<ComponentCache>}","types":["Array.<ComponentCache>"],"typesDescription":"!<code>Array</code>.&lt;<a href=\"ComponentCache.html\">ComponentCache</a>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":123,"codeStart":127,"code":"let _componentCache = [];","ctx":{"type":"declaration","name":"_componentCache","value":"[]","string":"_componentCache"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":128,"codeStart":129,"code":"let _contextSeqNum = 0;","ctx":{"type":"declaration","name":"_contextSeqNum","value":"0","string":"_contextSeqNum"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":130,"codeStart":131,"code":"let _enableHttpCaching = true;","ctx":{"type":"declaration","name":"_enableHttpCaching","value":"true","string":"_enableHttpCaching"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":132,"codeStart":133,"code":"const _objectObserver = new ObjectObserver();","ctx":{"type":"declaration","name":"_objectObserver","value":"new ObjectObserver()","string":"_objectObserver"}},{"tags":[{"type":"class","string":"Zuix"},{"type":"constructor","string":""},{"type":"return","string":"{Zuix}","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"zUIx, Javascript library for component-based development.","summary":"zUIx, Javascript library for component-based development.","body":""},"isPrivate":false,"isConstructor":true,"isClass":true,"isEvent":false,"ignore":false,"line":135,"codeStart":142,"code":"function Zuix() {\n    _componentizer.setHost(this);","ctx":{"type":"constructor","name":"Zuix","string":"Zuix()"}},{"tags":[{"type":"type","string":"{Array}","types":["Array"],"typesDescription":"<code>Array</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":144,"codeStart":148,"code":"this._store = [];","ctx":{"type":"property","receiver":"this","name":"_store","value":"[]","string":"this._store"}},{"tags":[{"type":"type","string":"{!Array.<ZxQuery>}","types":["Array.<ZxQuery>"],"typesDescription":"!<code>Array</code>.&lt;<a href=\"ZxQuery.html\">ZxQuery</a>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":149,"codeStart":153,"code":"this._fieldCache = [];\nreturn this;\n}","ctx":{"type":"property","receiver":"this","name":"_fieldCache","value":"[]","string":"this._fieldCache"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{ContextControllerHandler} handler The context controller handler","name":"handler","description":"The context controller handler","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextControllerHandler}","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":157,"codeStart":163,"code":"function controller(handler) {\n    if (typeof handler['for'] !== 'function') {\n        handler['for'] = function(componentId) {\n            _globalHandlers[componentId] = handler;\n            return handler;\n        };\n    }\n    return handler;\n}","ctx":{"type":"function","name":"controller","string":"controller()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{!string} fieldName Value to match in the `data-ui-field` attribute.","name":"fieldName","description":"Value to match in the `data-ui-field` attribute.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{!Element|!ZxQuery} [container] Starting DOM element for this search (**default:** *document*)","name":"[container]","description":"Starting DOM element for this search (**default:** *document*)","types":["Element","ZxQuery"],"typesDescription":"!<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":true,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{object} [context] The context","name":"[context]","description":"The context","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery} ZxQuery object with elements matching the given ```data-ui-field``` attribute.\nIf the matching element is just one, then it will also have the extra method `field(fieldName)`\nto search for fields contained in it.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"ZxQuery object with elements matching the given ```data-ui-field``` attribute. If the matching element is just one, then it will also have the extra method `field(fieldName)`\nto search for fields contained in it."}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":173,"codeStart":184,"code":"function field(fieldName, container, context) {\n    if (util.isNoU(context)) {\n        context = this;\n    }\n    if (context._fieldCache == null) {\n        context._fieldCache = {};\n    }\n\n    let el = null;\n    if (typeof context._fieldCache[fieldName] === 'undefined') {\n        el = z$(container).find(util.dom.queryAttribute(_optionAttributes.dataUiField, fieldName));\n        if (el != null && el.length() > 0) {\n            context._fieldCache[fieldName] = el;\n            // extend the returned `ZxQuery` object adding the `field` method\n            if (el.length() === 1 && util.isNoU(el.field)) {\n                el.field = function(name) {\n                    return field(name, el, el);\n                };\n            }\n        }\n    } else el = context._fieldCache[fieldName];\n\n    return el;\n}","ctx":{"type":"function","name":"field","string":"field()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{!string} componentId The id/name of the component we want to load.","name":"componentId","description":"The id/name of the component we want to load.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{ContextOptions|undefined} [options] context options used to initialize the loaded component","name":"[options]","description":"context options used to initialize the loaded component","types":["ContextOptions"],"typesDescription":"<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext}","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":209,"codeStart":216,"code":"function load(componentId, options) {\n    // TODO: throw error on argument mismatch\n    // TODO: prevent load loops when including recursively a component\n    componentId = _componentizer.resolvePath(componentId);","ctx":{"type":"function","name":"load","string":"load()"}},{"tags":[{"type":"type","string":"{ComponentContext}","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":220,"codeStart":221,"code":"let ctx = null;\nif (!util.isNoU(options)) {\n    // the `componentId` property is mandatory for `createContext` to work properly\n    options.componentId = componentId;\n    // check if context has its unique id assigned\n    if (!util.isNoU(options.contextId)) {\n        // if it does, try to pick it from allocated contexts list\n        ctx = context(options.contextId);\n        if (ctx !== null) {\n            ctx.options(options);\n        } else {\n            // if no context is already allocated\n            // with that id, then add a new one\n            ctx = createContext(options);\n        }\n    } else {\n        if (options === false) {\n            options = {};\n        }\n        // generate contextId (this is a bit buggy, but it's quick)\n        options.contextId = 'zuix-ctx-' + (++_contextSeqNum);\n        ctx = createContext(options);\n    }\n} else {\n    // TODO: check if this case is of any use\n    // empty context\n    options = {};\n    ctx = new ComponentContext(zuix, options, trigger);\n}\n\n// assign the given component (widget) to this context\nif (ctx.componentId != componentId) {\n    // mutable component, rebind to a different component\n    // preserving current context data\n    ctx.componentId = componentId;","ctx":{"type":"declaration","name":"ctx","value":"null","string":"ctx"}},{"tags":[],"description":{"full":"TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }","summary":"TODO: to be fixed\n         if (!util.isNoU(context.view())) {\n         // TODO: implement this code in a context.detach() method\n         //context.controller().pause()\n         context.view().detach();\n         context.view(null);\n         }","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":256,"codeStart":264,"code":"}\n\nif (util.isFunction(options.ready)) {\n    ctx.ready = options.ready;\n}\nif (util.isFunction(options.error)) {\n    ctx.error = options.error;\n}\n\nif (resourceLoadTask[componentId] == null) {\n    resourceLoadTask[componentId] = true;\n    return loadResources(ctx, options);\n} else {\n    if (_pendingResourceTask[componentId] == null) {\n        _pendingResourceTask[componentId] = [];\n    }\n    _pendingResourceTask[componentId].push({c: ctx, o: options});\n}\n\nreturn ctx;\n}\n\nfunction getResourcePath(path) {\nlet config = zuix.store('config');\nif (config != null && config[location.host] != null) {\n    config = config[location.host];\n}\npath = _componentizer.resolvePath(path);\nif (!path.startsWith('//') && path.indexOf('://') < 0) {\n    path = (config != null && config.resourcePath != null ? config.resourcePath : '') + path;\n}\nreturn path;\n}","ctx":false},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{ComponentContext} ctx Component context","name":"ctx","description":"Component context","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{JSON} options Context loading options","name":"options","description":"Context loading options","types":["JSON"],"typesDescription":"<a href=\"JSON.html\">JSON</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext}","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":298,"codeStart":304,"code":"function loadResources(ctx, options) {\n    // pick it from cache if found","ctx":{"type":"function","name":"loadResources","string":"loadResources()"}},{"tags":[{"type":"type","string":"{ComponentCache}","types":["ComponentCache"],"typesDescription":"<a href=\"ComponentCache.html\">ComponentCache</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":306,"codeStart":307,"code":"let cachedComponent = getCachedComponent(ctx.componentId);\nif (cachedComponent !== null && options.controller == null && ctx.controller() == null) {\n    ctx.controller(cachedComponent.controller);\n    _log.t(ctx.componentId+':js', 'component:cached:js');\n}\n\nif (util.isNoU(options.view)) {\n    if (cachedComponent !== null) {\n        if (cachedComponent.view != null) {\n            ctx.view(cachedComponent.view);\n            _log.t(ctx.componentId+':html', 'component:cached:html');\n        }","ctx":{"type":"declaration","name":"cachedComponent","value":"getCachedComponent(ctx.componentId)","string":"cachedComponent"}},{"tags":[],"description":{"full":"TODO: CSS caching, to be tested.","summary":"TODO: CSS caching, to be tested.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":319,"codeStart":322,"code":"if (options.css !== false) {\n    options.css = false;\n    if (!cachedComponent.css_applied) {\n        cachedComponent.css_applied = true;\n        ctx.style(cachedComponent.css);\n        _log.t(ctx.componentId + ':css', 'component:cached:css');\n    }\n}\n        }\n\n        // if not able to inherit the view from the base cachedComponent\n        // or from an inline element, then load the view from web\n        if (util.isNoU(ctx.view())) {\n// Load View\ntaskQueue('resource-loader').queue(ctx.componentId+':html', function() {\n    resourceLoadTask[ctx.componentId] = this;\n\n    ctx.loadHtml({\n        cext: options.cext,\n        caching: _enableHttpCaching,\n        success: function(html) {\n            if (cachedComponent == null) {\n                cachedComponent = cacheComponent(ctx);\n            }\n            cachedComponent.view = html;\n            delete cachedComponent.controller;\n            if (options.css !== false) {\n                resourceLoadTask[ctx.componentId].step(ctx.componentId+':css');\n                ctx.loadCss({\n                    caching: _enableHttpCaching,\n                    success: function(css) {\n                        cachedComponent.css = css;\n                    },\n                    error: function(err) {\n                        _log.e(err, ctx);\n                    },\n                    then: function() {\n                        loadController(ctx, resourceLoadTask[ctx.componentId]);\n                    }\n                });\n            } else {\n                loadController(ctx, resourceLoadTask[ctx.componentId]);\n            }\n        },\n        error: function(err) {\n            _log.e(err, ctx);\n            if (util.isFunction(options.error)) {\n                (ctx.error).call(ctx, err, ctx);\n            }\n        }\n    });\n}, options.priority);\n// defer controller loading\nreturn ctx;\n        }\n    } else {\n        ctx.view(options.view);\n    }\n    if (ctx.controller() == null) {\n        taskQueue('resource-loader').queue(ctx.componentId + ':js', function() {\nresourceLoadTask[ctx.componentId] = this;\nloadController(ctx, resourceLoadTask[ctx.componentId]);\n        }, _contextRoot.length);\n    } else loadController(ctx);\n\n    return ctx;\n}","ctx":{"type":"method","name":"if","string":"if()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"context {ComponentContext|Element}","name":"context","description":"{ComponentContext|Element}","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":389,"codeStart":394,"code":"function unload(context) {\n    if (context instanceof Element) {\n        const el = context;\n        context = zuix.context(el);\n        // remove element from componentizer queue if\n        // it's a lazy-loadable element not yet loaded\n        _componentizer.dequeue(el);\n    }\n    if (!util.isNoU(context)) {\n        context.dispose();\n    }\n}","ctx":{"type":"function","name":"unload","string":"unload()"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":407,"codeStart":408,"code":"function createContext(options) {\n    const context = new ComponentContext(zuix, options, trigger);\n    _contextRoot.push(context);\n    return context;\n}","ctx":{"type":"function","name":"createContext","string":"createContext()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{Element|ZxQuery|object} contextId The `contextId` object\n(usually a string) or the container/view element of the component.","name":"contextId","description":"The `contextId` object (usually a string) or the container/view element of the component.","types":["Element","ZxQuery","object"],"typesDescription":"<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} [callback] The callback function that will pass the context object once it is ready.","name":"[callback]","description":"The callback function that will pass the context object once it is ready.","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The matching component context or `null` if the context does not exists or it is not yet loaded.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The matching component context or `null` if the context does not exists or it is not yet loaded."}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":414,"codeStart":422,"code":"function context(contextId, callback) {\n    let context = null;\n    if (contextId instanceof z$.ZxQuery) {\n        contextId = contextId.get();\n    } else if (typeof contextId === 'string') {\n        const ctx = z$.find(util.dom.queryAttribute(_optionAttributes.dataUiContext, contextId));\n        if (ctx.length() > 0) contextId = ctx.get();\n    }\n    z$.each(_contextRoot, function(k, v) {\n        if ((contextId instanceof Element && (v.view() === contextId || v.container() === contextId))\n            || util.objectEquals(v.contextId, contextId)) {\n            context = v;\n            return false;\n        }\n    });\n    if (typeof callback === 'function' && (contextId instanceof Element || contextId instanceof z$.ZxQuery)) {\n        if (context == null || !context.isReady) {\n            z$(contextId).one('component:ready', function() {\n                context = zuix.context(this);\n                callback.call(context, context);\n            });\n        } else callback.call(context, context);\n    }\n    return context;\n}","ctx":{"type":"function","name":"context","string":"context()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{string} path","name":"path","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function|undefined} handler","name":"handler","description":"","types":["function"],"typesDescription":"<code>function</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":448,"codeStart":454,"code":"function hook(path, handler) {\n    if (util.isNoU(handler)) {\n        delete _hooksCallbacks[path];\n    } else _hooksCallbacks[path] = handler;\n}","ctx":{"type":"function","name":"hook","string":"hook()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{object} context","name":"context","description":"","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} path","name":"path","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object|undefined} data","name":"data","description":"","types":["object"],"typesDescription":"<code>object</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"Fires a zUIx hook.","summary":"Fires a zUIx hook.","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":460,"codeStart":468,"code":"function trigger(context, path, data) {\n    if (util.isFunction(_hooksCallbacks[path])) {\n        _hooksCallbacks[path].call(context, data, context);\n    }\n}","ctx":{"type":"function","name":"trigger","string":"trigger()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{boolean} [enable]","name":"[enable]","description":"","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{boolean} *true* if HTTP caching is enabled, *false* otherwise.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"*true* if HTTP caching is enabled, *false* otherwise."}],"description":{"full":"Enable/Disable HTTP caching","summary":"Enable/Disable HTTP caching","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":474,"codeStart":481,"code":"function httpCaching(enable) {\n    if (enable != null) {\n        _enableHttpCaching = enable;\n    }\n    return _enableHttpCaching;\n}\n\n// *********************** private members ************************* //","ctx":{"type":"function","name":"httpCaching","string":"httpCaching()"}},{"tags":[{"type":"private","string":"","visibility":"private"}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":491,"codeStart":492,"code":"function removeCachedComponent(componentId) {\n    // TODO: removeCachedComponent\n    // TODO: should this be called when last instance of a component type is disposed?\n}","ctx":{"type":"function","name":"removeCachedComponent","string":"removeCachedComponent()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{Object} componentId","name":"componentId","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentCache}","types":["ComponentCache"],"typesDescription":"<a href=\"ComponentCache.html\">ComponentCache</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":497,"codeStart":502,"code":"function getCachedComponent(componentId) {","ctx":{"type":"function","name":"getCachedComponent","string":"getCachedComponent()"}},{"tags":[{"type":"type","string":"{ComponentCache|null}","types":["ComponentCache"],"typesDescription":"<a href=\"ComponentCache.html\">ComponentCache</a>|<code>null</code>","optional":false,"nullable":true,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":503,"codeStart":504,"code":"let cached = null;\nz$.each(_componentCache, function(k, v) {\n    if (util.objectEquals(v.componentId, componentId)) {\n        cached = v;\n        return false;\n    }\n});\nreturn cached;\n}","ctx":{"type":"declaration","name":"cached","value":"null","string":"cached"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{ComponentContext} context","name":"context","description":"","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{TaskQueue} [task]","name":"[task]","description":"","types":["TaskQueue"],"typesDescription":"<a href=\"TaskQueue.html\">TaskQueue</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":514,"codeStart":519,"code":"function loadController(context, task) {\n    if (typeof context.options().controller === 'undefined' && context.controller() === null) {\n        _log.d(context.componentId, 'controller:load');\n        if (!util.isNoU(task)) {\n            task.step(context.componentId+':js');\n        }\n        if (util.isFunction(_globalHandlers[context.componentId])) {\n            context.controller(_globalHandlers[context.componentId]);\n            createComponent(context, task);\n        } else {\n            const job = function(t) {\n                const jsPath = context.componentId + '.js' + (_enableHttpCaching ? '' : '?'+new Date().getTime());\n                z$.ajax({\n                    url: getResourcePath(jsPath),\n                    success: function(ctrlJs) {\n                        // TODO: improve js parsing!\n                        try {\n                            const fn = ctrlJs.indexOf('function');\n                            const il = ctrlJs.indexOf('.load');\n                            if (il > 1 && il < fn) {\n                                ctrlJs = ctrlJs.substring(0, il - 4);\n                            }\n                            const ih = ctrlJs.indexOf('.controller');\n                            if (ih > 1 && ih < fn) {\n                                ctrlJs = ctrlJs.substring(ih + 11);\n                            }\n                            const ec = ctrlJs.indexOf('//<--controller');\n                            if (ec > 0) {\n                                ctrlJs = ctrlJs.substring(0, ec);\n                            }\n                            ctrlJs += '\\n//# sourceURL=\"'+context.componentId + '.js\"\\n';\n                            context.controller(getController(ctrlJs));\n                        } catch (e) {\n                            _log.e(new Error(), e, ctrlJs, context);\n                            if (util.isFunction(context.error)) {\n                                (context.error).call(context, e, context);\n                            }\n                        }\n                    },\n                    error: function(err) {\n                        _log.e(err, new Error(), context);\n                        if (util.isFunction(context.error)) {\n                            (context.error).call(context, err, context);\n                        }\n                    },\n                    then: function() {\n                        createComponent(context, t);\n                    }\n                });\n            };\n            if (util.isNoU(task)) {\n                taskQueue('resource-loader').queue(context.componentId+':js', function() {\n                    job(resourceLoadTask[context.componentId] = this);\n                }, context.options().priority);\n            } else job(task);\n        }\n    } else {\n        createComponent(context, task);\n    }\n}\n\nfunction cacheComponent(context) {\n    const html = context.view().innerHTML; // (context.view() === context.container() ? context.view().innerHTML : context.view().outerHTML);\n    const c = z$.wrapElement('div', html);","ctx":{"type":"function","name":"loadController","string":"loadController()"}},{"tags":[{"type":"type","string":"{ComponentCache}","types":["ComponentCache"],"typesDescription":"<a href=\"ComponentCache.html\">ComponentCache</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":583,"codeStart":584,"code":"const cached = {\n    componentId: context.componentId,\n    view: c.innerHTML,\n    css: context._css,\n    controller: context.controller()\n};\n_componentCache.push(cached);\n_log.t(context.componentId, 'bundle:added');\nreturn cached;\n}","ctx":{"type":"declaration","name":"cached","value":"{","string":"cached"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{ComponentContext} context","name":"context","description":"","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{TaskQueue} [task]","name":"[task]","description":"","types":["TaskQueue"],"typesDescription":"<a href=\"TaskQueue.html\">TaskQueue</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":595,"codeStart":600,"code":"function createComponent(context, task) {\n    resourceLoadTask[context.componentId] = null;\n    if (!util.isNoU(context.view())) {\n        let cached = getCachedComponent(context.componentId);\n        if (!context.options().viewDeferred) {\n            if (cached === null) {\n                cached = cacheComponent(context);\n            } else if (cached.controller == null) {\n                cached.controller = context.controller();\n            }\n        } else _log.w(context.componentId, 'component:deferred:load');\n\n        if (task != null) {\n            task.callback(function() {\n                _log.d(context.componentId, 'controller:create:deferred');\n                initController(context._c);\n            });\n        }\n        const v = z$(context.view());\n        if (v.attr(_optionAttributes.dataUiContext) == null) {\n            v.attr(_optionAttributes.dataUiContext, context.contextId);\n        }\n\n        _log.d(context.componentId, 'component:initializing');\n        if (util.isFunction(context.controller())) {\n            // TODO: should use 'require' instead of 'new Controller' ... ?","ctx":{"type":"function","name":"createComponent","string":"createComponent()"}},{"tags":[{"type":"type","string":"{ContextController}","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":626,"codeStart":627,"code":"const c = context._c = new ContextController(context);\nc.log = require('../helpers/Logger')(context.contextId);\nif (typeof c.init === 'function') {\n    c.init();\n}\nif (!util.isNoU(c.view())) {\n    // if it's not null, a controller was already loaded, so we preserve the base controller name\n    // TODO: when loading multiple controllers perhaps some code paths can be skipped -- check/optimize this!\n    if (c.view().attr(_optionAttributes.dataUiComponent) == null) {\n        c.view().attr(_optionAttributes.dataUiComponent, '');\n    }\n    // if no model is supplied, try auto-create from view fields\n    if (util.isNoU(context.model()) && !util.isNoU(context.view())) {\n        context.viewToModel();\n    }\n    if (context.options().viewDeferred) {\n        context.options().viewDeferred = false;\n        // save the original inline view\n        // before loading the view template\n        // it can be then restored with c.restoreView()\n        c.saveView();\n\n        // TODO: check if this case is still required, otherwise remove it.\n        if (cached === null) {\n            cached = {\n                componentId: context.componentId,\n                controller: context.controller()\n            };\n            _componentCache.push(cached);\n            _log.t(context.componentId, 'bundle:added');\n            _log.d(context.componentId, 'component:deferred:load');\n        }\n\n        let pending = -1;\n        if (context.options().css !== false) {\n            if (cached.css == null) {\n                if (pending === -1) pending = 0;\n                pending++;\n                context.loadCss({\n                    caching: _enableHttpCaching,\n                    success: function(css) {\n                        // TODO: this is a work-around for 'componentize' overlapping issue\n                        if (cached.css == null) {\n                            cached.css = css;\n                        }\n                        _log.d(context.componentId, 'component:deferred:css', pending);\n                    },\n                    then: function() {\n                        if (--pending === 0 && task != null) {\n                            task.end();\n                        }\n                    }\n                });\n            } else context.style(cached.css);\n        }\n        if (context.options().html !== false) {\n            if (cached.view == null) {\n                if (pending === -1) pending = 0;\n                pending++;\n                context.loadHtml({\n                    cext: context.options().cext,\n                    caching: _enableHttpCaching,\n                    success: function(html) {\n                        // TODO: this is a work-around for 'componentize' overlapping issue\n                        if (cached.view == null) {\n                            cached.view = html;\n                        }\n                        _log.d(context.componentId, 'component:deferred:html', pending);\n                    },\n                    error: function(err) {\n                        _log.e(err, context);\n                        if (util.isFunction(context.options().error)) {\n                            (context.options().error).call(context, err, context);\n                        }\n                    },\n                    then: function() {\n                        if (--pending === 0 && task != null) {\n                            task.end();\n                        }\n                    }\n                });\n            } else context.view(cached.view);\n        }\n        if (pending === -1 && task != null) {\n            task.end();\n        }\n    } else if (task != null) task.end();\n}\nc.trigger('view:apply');\n\nif (task == null) {\n    _log.d(context.componentId, 'controller:create');\n    initController(c);\n}\n        } else {\n_log.w(context.componentId, 'component:controller:undefined');\n        }\n    } else {\n        // TODO: should report error or throw an exception\n        _log.e(context.componentId, 'component:view:undefined');\n    }\n}","ctx":{"type":"declaration","name":"c","value":"context._c = new ContextController(context)","string":"c"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"{ContextController} c","name":"c","description":"","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":730,"codeStart":734,"code":"function initController(c) {\n    _log.t(c.context.componentId, 'controller:init', 'timer:init:start');\n\n    // re-enable nested components loading\n    c.view().find(util.dom.queryAttribute(_optionAttributes.dataUiLoaded, 'false', util.dom.cssNot(_optionAttributes.dataUiComponent)))\n        .each(function(i, v) {\n            this.attr(_optionAttributes.dataUiLoaded, null);\n        });\n\n    // bind {ContextController}.field method\n    c.field = function(fieldName) {\n        const el = field(fieldName, c.view(), c);\n        el.on = function(eventPath, eventHandler, eventData, isHook) {\n            if (typeof eventHandler === 'string') {\n                const eh = eventHandler;\n                eventHandler = function() {\n                    c.trigger(eh, eventData, isHook);\n                };\n            }\n            return z$.ZxQuery.prototype.on.call(this, eventPath, eventHandler);\n        };\n        return el;\n    };\n\n    if (util.isFunction(c.create)) c.create();\n    c.trigger('view:create');\n\n    if (util.isFunction(c.context.ready)) {\n        (c.context.ready).call(c.context, c.context);\n    }\n\n    c.trigger('component:ready', c.view(), true);\n    c.context.isReady = true;\n\n    _log.t(c.context.componentId, 'controller:init', 'timer:init:stop');\n    _log.i(c.context.componentId, 'component:loaded', c.context.contextId);\n\n    if (_pendingResourceTask[c.context.componentId] != null) {\n        const pendingRequests = _pendingResourceTask[c.context.componentId];\n        _pendingResourceTask[c.context.componentId] = null;\n        let ctx;\n        while (pendingRequests != null && (ctx = pendingRequests.shift()) != null) {\n            loadResources(ctx.c, ctx.o);\n        }\n    }\n\n    zuix.componentize(c.view());\n}","ctx":{"type":"function","name":"initController","string":"initController()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"param","string":"javascriptCode string","name":"javascriptCode","description":"string","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false},{"type":"return","string":"{ContextControllerHandler}","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":783,"codeStart":788,"code":"// TODO: refactor this method name\nfunction getController(javascriptCode) {\n    let instance = function(ctx) { };\n    if (typeof javascriptCode === 'string') {\n        try {\n            instance = (eval).call(this, javascriptCode);\n        } catch (e) {\n            // TODO: should trigger a global hook\n            // eg. 'controller:error'\n            _log.e(this, e, javascriptCode);\n        }\n    }\n    return instance;\n}\n\nfunction replaceCache(c) {\n    _componentCache = c;\n}\n\n// ******************* proto ******************** //","ctx":false},{"tags":[{"type":"example","string":"\n<small>**Example - HTML**</small>\n```html\n<div data-ui-field=\"sample-container\">\n   <!-- container HTML -->\n</div>\n```\n\n<small>**Example - JavaScript**</small>\n```js\nvar container = zuix.field('sample-container');\ncontainer.html('Hello World!');\n```"},{"type":"param","string":"{!string} fieldName Value of `data-ui-field` to look for.","name":"fieldName","description":"Value of `data-ui-field` to look for.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{!Element} [container] Starting DOM element for this search (**default:** *document*)","name":"[container]","description":"Starting DOM element for this search (**default:** *document*)","types":["Element"],"typesDescription":"!<code>Element</code>","optional":true,"nullable":false,"nonNullable":true,"variable":false},{"type":"return","string":"{ZxQuery} ZxQuery object with elements matching the given ```data-ui-field``` attribute.\nIf the matching element is just one, then it will also have the extra method `field(fieldName)`\nto search for fields contained in it.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"ZxQuery object with elements matching the given ```data-ui-field``` attribute. If the matching element is just one, then it will also have the extra method `field(fieldName)`\nto search for fields contained in it."}],"description":{"full":"Search the document or inside the given `container` for elements\nwith `data-ui-field` attribute matching the provided `fieldName`.\nThis method implements a caching mechanism and automatic\ndisposal of allocated objects and events.","summary":"Search the document or inside the given `container` for elements\nwith `data-ui-field` attribute matching the provided `fieldName`.\nThis method implements a caching mechanism and automatic\ndisposal of allocated objects and events.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":810,"codeStart":838,"code":"Zuix.prototype.field = function(fieldName, container) {\n    return field.call(this, fieldName, container);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"field","string":"Zuix.prototype.field()"}},{"tags":[{"type":"example","string":"\n<small>**Example - JavaScript**</small>\n```js\n// declare inline the controller for component 'example/component'\nconst exampleController = zuix.controller((cp) => {\n    // declare `create` life-cycle callback\n    cp.create = () => {\n        // expose a public method\n        cp.expose('test', testMethod);\n        // set the content of the view\n        cp.view().html('Helllo World!');\n    }\n    function testMethod() {\n        cp.log.i(\"Method exposing test\");\n        cp.view().html('A simple test.');\n    }\n}).for('example/component');\n\n// store a reference to the container\nconst container = zuix.field('sample-container');\n\n // declare loading options\nconst componentOptions = {\n    view: container,\n    // callback called after the component is loaded\n    ready: (ctx) => {\n        ctx..log(\"Loading complete.\");\n        ctx.log(\"Component instance context\", this);\n        // call the `test` method after 1s\n        setTimeout(ctx.test, 1000);\n    },\n    // callback called if an error occurs\n    error: (error) => {\n        console.log(\"Loading error!\", error);\n    }\n};\nzuix.load('example/component', componentOptions);\n```"},{"type":"param","string":"{!string} componentId The identifier name of the component to be loaded.","name":"componentId","description":"The identifier name of the component to be loaded.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{ContextOptions} [options] Options used to initialize the loaded component.","name":"[options]","description":"Options used to initialize the loaded component.","types":["ContextOptions"],"typesDescription":"<a href=\"ContextOptions.html\">ContextOptions</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The component context.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The component context."}],"description":{"full":"Loads a component.\nThis is the programmatic equivalent of `data-ui-include`\nor `data-ui-load` attributes used to\ninclude content or load components from the HTML code.","summary":"Loads a component.\nThis is the programmatic equivalent of `data-ui-include`\nor `data-ui-load` attributes used to\ninclude content or load components from the HTML code.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":841,"codeStart":891,"code":"Zuix.prototype.load = function(componentId, options) {\n    return load.call(this, componentId, options);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"load","string":"Zuix.prototype.load()"}},{"tags":[{"type":"example","string":"\n<small>**Example - JavaScript**</small>\n```js\nzuix.unload(ctx);\n```"},{"type":"param","string":"{ComponentContext|Element} context The instance of the component to be unloaded or its container element.\nPass *Element* type if the underlying component is lazy-loadable and it might not have been instantiated yet.","name":"context","description":"The instance of the component to be unloaded or its container element. Pass *Element* type if the underlying component is lazy-loadable and it might not have been instantiated yet.","types":["ComponentContext","Element"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>|<code>Element</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix} The ```{Zuix}``` object itself.","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{Zuix}``` object itself."}],"description":{"full":"Unloads the given component context releasing all allocated resources.","summary":"Unloads the given component context releasing all allocated resources.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":894,"codeStart":908,"code":"Zuix.prototype.unload = function(context) {\n    unload(context);\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"unload","string":"Zuix.prototype.unload()"}},{"tags":[{"type":"example","string":"\n <small>**Example - JavaScript**</small>\n <pre data-line=\"2\"><code class=\"language-js\">\n // Allocates the controller handler to be used for the component 'path/to/component_name'\n var ctrl = zuix.controller(function(cp) {\n    // `cp` is the {ContextController}\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n}).for('path/to/component_name');\n </code></pre>"},{"type":"param","string":"{ContextControllerHandler} handler Function called to initialize the component controller that will be passed as argument of this function.","name":"handler","description":"Function called to initialize the component controller that will be passed as argument of this function.","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextControllerHandler} The allocated controller handler.","types":["ContextControllerHandler"],"typesDescription":"<a href=\"ContextControllerHandler.html\">ContextControllerHandler</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The allocated controller handler."}],"description":{"full":"Allocates the handler for the component controller. The provided `handler` function will be called\nto initialize the controller object once the component has been loaded.","summary":"Allocates the handler for the component controller. The provided `handler` function will be called\nto initialize the controller object once the component has been loaded.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":912,"codeStart":931,"code":"Zuix.prototype.controller = function(handler) {\n    return controller.call(this, handler);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"controller","string":"Zuix.prototype.controller()"}},{"tags":[{"type":"example","string":"\n<small>**Example - HTML**</small>\n```html\n<div data-ui-load=\"site/components/slideshow\"\n     data-ui-context=\"my-slide-show\">...</div>\n```\n<small>**Example - JavaScript**</small>\n```js\nvar slideShowDiv = zuix.$.find('[data-ui-context=\"my-slide-show\"]');\nvar ctx = zuix.context(slideShowDiv);\n// or\nvar ctx = zuix.context('my-slide-show');\n// call exposed component methods\nctx.setSlide(1);\n// or\nvar ctx;\nzuix.context('my-slide-show', function(c) {\n    // call component methods\n    c.setSlide(1);\n    // eventually store a reference to the component for later use\n    ctx = c;\n});\n```"},{"type":"param","string":"{Element|ZxQuery|object} contextId The `contextId` object\n(usually a string) or the container/view element of the component.","name":"contextId","description":"The `contextId` object (usually a string) or the container/view element of the component.","types":["Element","ZxQuery","object"],"typesDescription":"<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>|<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} [callback] The callback function that will be called once the component is loaded. The {ComponentContext} object will be passed as argument of this callback.","name":"[callback]","description":"The callback function that will be called once the component is loaded. The {ComponentContext} object will be passed as argument of this callback.","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext} The matching component context or `null` if the component does not exists or it is not yet loaded.","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The matching component context or `null` if the component does not exists or it is not yet loaded."}],"description":{"full":"Gets a `ComponentContext` object, given its `contextId` or its container/view element.\nThe `contextId` is the one specified by the `ContextOptions` object or by using the HTML attribute `data-ui-context`.","summary":"Gets a `ComponentContext` object, given its `contextId` or its container/view element.\nThe `contextId` is the one specified by the `ContextOptions` object or by using the HTML attribute `data-ui-context`.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":934,"codeStart":968,"code":"Zuix.prototype.context = function(contextId, callback) {\n    return context.call(this, contextId, callback);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"context","string":"Zuix.prototype.context()"}},{"tags":[{"type":"param","string":"{string} componentId Identifier name of the component to create.","name":"componentId","description":"Identifier name of the component to create.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{ContextOptions|undefined} [options] Component context options.","name":"[options]","description":"Component context options.","types":["ContextOptions"],"typesDescription":"<a href=\"ContextOptions.html\">ContextOptions</a>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ComponentContext}","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Creates the component specified by `componentId` and returns its `{ComponentContext}` object.\nThe returned component it's unloaded and detached from the DOM and it must be explicitly attached.\nAfter attaching it to the DOM, `zuix.componentize()` must be called in\norder to actually load and display the component.","summary":"Creates the component specified by `componentId` and returns its `{ComponentContext}` object.\nThe returned component it's unloaded and detached from the DOM and it must be explicitly attached.\nAfter attaching it to the DOM, `zuix.componentize()` must be called in\norder to actually load and display the component.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":971,"codeStart":981,"code":"Zuix.prototype.createComponent = function(componentId, options) {\n    if (options == null) options = {};\n    if (util.isNoU(options.contextId)) {\n        options.contextId = 'zuix-ctx-' + (++_contextSeqNum);\n    }\n    if (context(options.contextId) != null) {\n        throw new Error('Context arelady exists.');\n    } else {\n        options.container = document.createElement('div');\n        options.componentId = componentId;\n        _componentizer.applyOptions(options.container, options);\n    }\n    return createContext(options);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"createComponent","string":"Zuix.prototype.createComponent()"}},{"tags":[{"type":"param","string":"{Object} context The context object (`this`) passed to handler functions listening to this event.","name":"context","description":"The context object (`this`) passed to handler functions listening to this event.","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} eventPath The path of the event to fire.","name":"eventPath","description":"The path of the event to fire.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} [eventData] The data object of the event.","name":"[eventData]","description":"The data object of the event.","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix} The ```{Zuix}``` object itself.","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{Zuix}``` object itself."}],"description":{"full":"Triggers the event specified by `eventPath`.","summary":"Triggers the event specified by `eventPath`.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":995,"codeStart":1003,"code":"Zuix.prototype.trigger = function(context, eventPath, eventData) {\n    trigger(context, eventPath, eventData);\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"trigger","string":"Zuix.prototype.trigger()"}},{"tags":[{"type":"example","string":"\n<small>**Example - JavaScript**</small>\n```js\n// The context `this` in the event handlers will be\n// the {ComponentContext} object that sourced the event.\n// The `data` parameter passed to the handlers, is of\n// variant type, depending on the type of the occurring event.\nzuix\n  .hook('load:begin', function(data){\n    loaderMessage.html('Loading \"'+data.task+'\" ...');\n    loaderMessage.show();\n\n}).hook('load:next', function(data){\n    loaderMessage.html('\"'+data.task+'\" done, loading next..');\n\n}).hook('load:end', function(){\n    loaderMessage.hide();\n\n}).hook('html:parse', function (data) {\n    // ShowDown - MarkDown syntax compiler\n    if (this.options().markdown === true && typeof showdown !== 'undefined')\n        data.content = new showdown.Converter()\n            .makeHtml(data.content);\n\n}).hook('css:parse', function (data) {\n    // process css, eg. run a CSS pre-processor\n    // eg. Sass, Less, ...\n\n}).hook('view:process', function (view) {\n    // The view DOM is now fully loaded and ready\n\n    // Prism code syntax highlighter\n    view.find('code').each(function (i, block) {\n        this.addClass('language-javascript');\n        Prism.highlightElement(block);\n    });\n\n    // Force opening of all non-local links in a new window\n    zuix.$('a[href*=\"://\"]').attr('target','_blank');\n\n    // Material Design Light auto-detection\n    // Call DOM upgrade on newly added view elements\n    if (componentHandler)\n        componentHandler.upgradeElements(view.get());\n\n});\n```"},{"type":"param","string":"{string} eventPath The event path.","name":"eventPath","description":"The event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function|undefined} eventHandler The handler function.","name":"eventHandler","description":"The handler function.","types":["function"],"typesDescription":"<code>function</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix} The ```{Zuix}``` object itself.","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{Zuix}``` object itself."}],"description":{"full":"Registers a callback for a global zUIx event.\nThere can only be one callback for each kind of global hook event.\nPass null as <eventHandler> to stop listening to a previously registered callback.","summary":"Registers a callback for a global zUIx event.\nThere can only be one callback for each kind of global hook event.\nPass null as <eventHandler> to stop listening to a previously registered callback.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1007,"codeStart":1065,"code":"Zuix.prototype.hook = function(eventPath, eventHandler) {\n    hook(eventPath, eventHandler);\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"hook","string":"Zuix.prototype.hook()"}},{"tags":[{"type":"example","string":"\n <small>**Example - JavaScript**</small>\n <pre><code class=\"language-js\">\n // Controller of component 'path/to/component_name'\n zuix.controller(function(cp) {\n    cp.init = function() {\n        zuix.using('script', 'https://some.cdn.js/moment.min.js', function(){\n            // can start using moment.js\n        });\n    };\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n});\n </code></pre>"},{"type":"param","string":"{string} resourceType Either `style`, `script` or `component`.","name":"resourceType","description":"Either `style`, `script` or `component`.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} resourcePath Relative or absolute resource url path","name":"resourcePath","description":"Relative or absolute resource url path","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} [callback] Callback function to call once resource is loaded.","name":"[callback]","description":"Callback function to call once resource is loaded.","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{void}","types":[],"typesDescription":"<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Loads a CSS or Javascript resource. All CSS styles and Javascript scripts\nloaded with this method will be also included in the application bundle.\nIf a resource is already loaded, the request will be ignored.\nThis command is also meant to be used inside a components' controller.\nThis enables the loading of a component without the need of manually including\nall of its dependencies since those will be automatically fetched as required.","summary":"Loads a CSS or Javascript resource. All CSS styles and Javascript scripts\nloaded with this method will be also included in the application bundle.\nIf a resource is already loaded, the request will be ignored.\nThis command is also meant to be used inside a components' controller.\nThis enables the loading of a component without the need of manually including\nall of its dependencies since those will be automatically fetched as required.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1069,"codeStart":1099,"code":"Zuix.prototype.using = function(resourceType, resourcePath, callback) {\n    resourcePath = _componentizer.resolvePath(resourcePath);\n    resourceType = resourceType.toLowerCase();\n    const hashId = resourceType+'-'+resourcePath.hashCode();\n\n    if (resourceType === 'component') {\n        const c = context(hashId);\n        if (c == null) {\n            zuix.load(resourcePath, {\n                contextId: hashId,\n                view: '',\n                priority: -10,\n                ready: function(ctx) {\n                    if (typeof callback === 'function') {\n                        callback(resourcePath, ctx);\n                    }\n                },\n                error: function() {\n                    callback(resourcePath, null);\n                }\n            });\n        } else if (typeof callback === 'function') {\n            // already loaded\n            callback(resourcePath, c);\n        }\n    } else {\n        const isCss = (resourceType === 'style');\n        if (z$.find(resourceType + '[id=\"' + hashId + '\"]').length() === 0) {\n            const head = document.head || document.getElementsByTagName('head')[0];\n            const resource = document.createElement(resourceType);\n            if (isCss) {\n                resource.type = 'text/css';\n                resource.id = hashId;\n            } else {\n                resource.type = 'text/javascript';\n                resource.id = hashId;\n            }\n            head.appendChild(resource);\n\n            // TODO: add logging\n            const addResource = function(text) {\n                // TODO: add logging\n                if (isCss) {\n                    if (resource.styleSheet) {\n                        resource.styleSheet.cssText = text;\n                    } else {\n                        resource.appendChild(document.createTextNode(text));\n                    }\n                } else {\n                    if (resource.innerText) {\n                        resource.innerText = text;\n                    } else {\n                        resource.appendChild(document.createTextNode(text));\n                    }\n                }\n                if (callback) {\n                    callback(resourcePath, hashId);\n                }\n            };\n\n            const cid = '_res/' + resourceType + '/' + hashId;\n            const cached = getCachedComponent(cid);\n            if (cached != null) {\n                addResource(isCss ? cached.css : cached.controller);\n            } else {\n                z$.ajax({\n                    url: resourcePath,\n                    success: function(resText) {\n                        // TODO: add logging","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"using","string":"Zuix.prototype.using()"}},{"tags":[{"type":"type","string":"{ComponentCache}","types":["ComponentCache"],"typesDescription":"<a href=\"ComponentCache.html\">ComponentCache</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1168,"codeStart":1169,"code":"const cached = {\n    componentId: cid,\n    view: null,\n    css: isCss ? resText : null,\n    controller: !isCss ? resText : null,\n    using: resourcePath\n};\n_componentCache.push(cached);\naddResource(resText);\n                    },\n                    error: function() {\n// TODO: add logging\nhead.removeChild(resource);\nif (callback) {\n    callback(resourcePath);\n}\n                    }\n                });\n            }\n        } else {\n            // TODO: add logging\n            // console.log('Resource already added ' + hashId + '(' + resourcePath + ')');\n            if (callback) {\n                callback(resourcePath, hashId);\n            }\n        }\n    }\n};","ctx":{"type":"declaration","name":"cached","value":"{","string":"cached"}},{"tags":[{"type":"param","string":"{boolean} [enable] Enable or disable lazy loading.","name":"[enable]","description":"Enable or disable lazy loading.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{number} [threshold] Load-ahead threshold (default is 1.0 => 100% of view size).","name":"[threshold]","description":"Load-ahead threshold (default is 1.0 => 100% of view size).","types":["number"],"typesDescription":"<code>number</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix|boolean} *true* if lazy-loading is enabled, *false* otherwise.","types":["Zuix","boolean"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>|<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"*true* if lazy-loading is enabled, *false* otherwise."}],"description":{"full":"Enables/Disables lazy-loading or gets the current setting.","summary":"Enables/Disables lazy-loading or gets the current setting.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1197,"codeStart":1204,"code":"Zuix.prototype.lazyLoad = function(enable, threshold) {\n    if (enable != null) {\n        _componentizer.lazyLoad(enable, threshold);\n    } else {\n        return _componentizer.lazyLoad();\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"lazyLoad","string":"Zuix.prototype.lazyLoad()"}},{"tags":[{"type":"param","string":"{boolean} [enable]","name":"[enable]","description":"","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix|boolean} *true* if HTTP caching is enabled, *false* otherwise.","types":["Zuix","boolean"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>|<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"*true* if HTTP caching is enabled, *false* otherwise."}],"description":{"full":"Enables/Disables HTTP caching or gets the current settings.","summary":"Enables/Disables HTTP caching or gets the current settings.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1212,"codeStart":1218,"code":"Zuix.prototype.httpCaching = function(enable) {\n    if (enable != null) {\n        httpCaching(enable);\n    } else {\n        return httpCaching();\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"httpCaching","string":"Zuix.prototype.httpCaching()"}},{"tags":[{"type":"example","string":"\n <small>**Example - JavaScript**</small>\n ```js\n zuix.componentize(document);\n ```"},{"type":"param","string":"{Element|ZxQuery} [element] Container to use as starting node for the search (**default:** *document*).","name":"[element]","description":"Container to use as starting node for the search (**default:** *document*).","types":["Element","ZxQuery"],"typesDescription":"<code>Element</code>|<a href=\"ZxQuery.html\">ZxQuery</a>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix} The ```{Zuix}``` object itself.","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{Zuix}``` object itself."}],"description":{"full":"Searches the document, or inside the given ```element```,\nfor all ```data-ui-include``` and ```data-ui-load``` attributes\nand processes these by loading the requested components.\nThis is a service function that should only be called if dynamically\nadding content with elements that contain *load* or *include* directives.","summary":"Searches the document, or inside the given ```element```,\nfor all ```data-ui-include``` and ```data-ui-load``` attributes\nand processes these by loading the requested components.\nThis is a service function that should only be called if dynamically\nadding content with elements that contain *load* or *include* directives.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1226,"codeStart":1243,"code":"Zuix.prototype.componentize = function(element) {\n    _componentizer.componentize(element);\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"componentize","string":"Zuix.prototype.componentize()"}},{"tags":[{"type":"param","string":"{string} name Entry name","name":"name","description":"Entry name","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} value Entry value","name":"value","description":"Entry value","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{object}","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets a global store entry.","summary":"Gets/Sets a global store entry.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1247,"codeStart":1253,"code":"Zuix.prototype.store = function(name, value) {\n    if (value != null) {\n        this._store[name] = value;\n    }\n    return this._store[name];\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"store","string":"Zuix.prototype.store()"}},{"tags":[{"type":"param","string":"{string} path resource id/path","name":"path","description":"resource id/path","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{string}","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Get a resource path.","summary":"Get a resource path.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1259,"codeStart":1264,"code":"Zuix.prototype.getResourcePath = function(path) {\n    return getResourcePath(path);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"getResourcePath","string":"Zuix.prototype.getResourcePath()"}},{"tags":[{"type":"param","string":"{Object} obj Object to observe","name":"obj","description":"Object to observe","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ObservableObject} The observable object","types":["ObservableObject"],"typesDescription":"<a href=\"ObservableObject.html\">ObservableObject</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The observable object"}],"description":{"full":"Get an observable instance of an object for detecting changes.","summary":"Get an observable instance of an object for detecting changes.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1267,"codeStart":1272,"code":"Zuix.prototype.observable = function(obj) {\n    return _objectObserver.observable(obj);\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"observable","string":"Zuix.prototype.observable()"}},{"tags":[{"type":"param","string":"{!Array.<BundleItem>} bundleData A bundle object holding in memory all components data (cache).","name":"bundleData","description":"A bundle object holding in memory all components data (cache).","types":["Array.<BundleItem>"],"typesDescription":"!<code>Array</code>.&lt;<a href=\"BundleItem.html\">BundleItem</a>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"param","string":"{function} [callback]","name":"[callback]","description":"","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Zuix|Array.<BundleItem>}","types":["Zuix","Array.<BundleItem>"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>|<code>Array</code>.&lt;<a href=\"BundleItem.html\">BundleItem</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the components data bundle.","summary":"Gets/Sets the components data bundle.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1275,"codeStart":1282,"code":"Zuix.prototype.bundle = function(bundleData, callback) {\n    if (util.isNoU(bundleData)) {\n        return _componentCache;\n    } else if (bundleData && typeof bundleData === 'boolean') {\n        _log.t('bundle:start');\n        const ll = _componentizer.lazyLoad();\n        _componentizer.lazyLoad(false);\n        _componentizer.componentize();\n        if (typeof callback === 'function') {\n            const waitLoop = function(w) {\n                setTimeout(function() {\n                    if (_componentizer.willLoadMore()) {\n                        _log.t('bundle:wait');\n                        w(w);\n                    } else {\n                        _log.t('bundle:end');\n                        _componentizer.lazyLoad(ll);\n                        callback();\n                    }\n                }, 1000);\n            };\n            waitLoop(waitLoop);\n        }\n    } else {\n        // reset css flag before importing bundle\n        for (let c = 0; c < bundleData.length; c++) {\n            if (bundleData[c].css_applied) {\n                delete bundleData[c].css_applied;\n            }\n            if (typeof bundleData[c].controller === 'string') {\n                bundleData[c].controller = eval(bundleData[c].controller);\n            }\n        }\n        _componentCache = bundleData;\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"bundle","string":"Zuix.prototype.bundle()"}},{"tags":[{"type":"description","string":"Helper class for querying and manipulating the DOM.","full":"Helper class for querying and manipulating the DOM.","summary":"Helper class for querying and manipulating the DOM.","body":""},{"type":"property","string":"{ZxQueryStatic}","name":"","description":"","types":["ZxQueryStatic"],"typesDescription":"<a href=\"ZxQueryStatic.html\">ZxQueryStatic</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"Helper class for querying and manipulating the DOM.","summary":"Helper class for querying and manipulating the DOM.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1320,"codeStart":1324,"code":"Zuix.prototype.$ = z$;\n// private\nZuix.prototype.TaskQueue = TaskQueue;\nZuix.prototype.ObjectObserver = ObjectObserver;\nZuix.prototype.ZxQuery = z$.ZxQuery;","ctx":{"type":"property","constructor":"Zuix","cons":"Zuix","name":"$","value":"z$","string":"Zuix.prototype.$"}},{"tags":[{"type":"return","string":"{Array<ComponentCache>}","types":["Array.<ComponentCache>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"ComponentCache.html\">ComponentCache</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Dumps content of the components cache. Mainly for debugging purpose.","summary":"Dumps content of the components cache. Mainly for debugging purpose.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1329,"codeStart":1333,"code":"Zuix.prototype.dumpCache = function() {\n    return _componentCache;\n};","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"dumpCache","string":"Zuix.prototype.dumpCache()"}},{"tags":[{"type":"return","string":"{Array<ComponentContext>}","types":["Array.<ComponentContext>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"ComponentContext.html\">ComponentContext</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Dumps allocated component contexts. Mainly for debugging purpose.","summary":"Dumps allocated component contexts. Mainly for debugging purpose.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1336,"codeStart":1340,"code":"Zuix.prototype.dumpContexts = function() {\n    return _contextRoot;\n};\n\n// TODO: add zuix.options to configure stuff like\n// TODO: the css/html/js lookup base path (each individually own prop)","ctx":{"type":"method","constructor":"Zuix","cons":"Zuix","name":"dumpContexts","string":"Zuix.prototype.dumpContexts()"}},{"tags":[{"type":"param","string":"root","name":"root","description":"","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false},{"type":"return","string":"{Zuix}","types":["Zuix"],"typesDescription":"<a href=\"Zuix.html\">Zuix</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1347,"codeStart":1351,"code":"module.exports = function(root) {\n    const zuix = new Zuix();\n    if (document.readyState != 'loading') {\n        zuix.componentize();\n    } else {\n        document.addEventListener('DOMContentLoaded', function() {\n            zuix.componentize();\n        });\n    }\n    // log messages monitor (one global listener)\n    _log.monitor(function(level, args) {\n        if (util.isFunction(zuix.monitor)) {\n            zuix.monitor(level, Array.prototype.slice.call(args));\n        }\n    });\n    return zuix;\n};","ctx":{"type":"method","receiver":"module","name":"exports","string":"module.exports()"}}]