[{"tags":[],"description":{"full":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst ObservableListener =\n    require('./ObservableListener');\nconst ObservableObject =\n    require('./ObservableObject');","ctx":false},{"tags":[{"type":"class","string":"ObjectObserver"},{"type":"constructor","string":""}],"description":{"full":"Object Observer","summary":"Object Observer","body":""},"isPrivate":false,"isConstructor":true,"isClass":true,"isEvent":false,"ignore":false,"line":34,"codeStart":40,"code":"function ObjectObserver() {","ctx":{"type":"constructor","name":"ObjectObserver","string":"ObjectObserver()"}},{"tags":[{"type":"private","string":"","visibility":"private"},{"type":"type","string":"{ObservableObject[]}","types":["Array.<ObservableObject>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"ObservableObject.html\">ObservableObject</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":true,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":41,"codeStart":45,"code":"this.observableList = [];\n}\n\nfunction getPath(observable) {\nlet path = '';\nwhile (observable && observable.__path__) {\n    const co = observable;\n    // TODO: this line is perhaps ambiguous how to resolve path if target[key] has more parents?\n    observable = observable.__parents__[0];\n    if (observable != null && observable.__path__ != null) {\n        path = '[\\'' + co.__path__ + '\\'].' + path;\n    } else {\n        path = co.__path__ + (!path.startsWith('[') ? '.' : '') + path;\n    }\n}\nreturn path;\n}\nfunction getListeners(observable) {\nconst listeners = [];\nobservable.__parents__.forEach(function(po) {\n    listeners.push(...getListeners(po));\n});\nlisteners.push(...observable.__listeners__);\nreturn listeners;\n};\n\nfunction deleteObservable(targetObservable) {\ngetListeners(targetObservable).forEach(","ctx":{"type":"property","receiver":"this","name":"observableList","value":"[]","string":"this.observableList"}},{"tags":[{"type":"param","string":"{ObservableListener} l","name":"l","description":"","types":["ObservableListener"],"typesDescription":"<a href=\"ObservableListener.html\">ObservableListener</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":73,"codeStart":74,"code":"function(l) {\n    targetObservable.unsubscribe(l);\n}\n    );\n}","ctx":{"type":"method","name":"function","string":"function()"}},{"tags":[{"type":"param","string":"{Object} obj The object to observe","name":"obj","description":"The object to observe","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ObservableObject} The observable object","types":["ObservableObject"],"typesDescription":"<a href=\"ObservableObject.html\">ObservableObject</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The observable object"}],"description":{"full":"Get an observable instance of an object for detecting changes.","summary":"Get an observable instance of an object for detecting changes.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":80,"codeStart":86,"code":"ObjectObserver.prototype.observable = function(obj) {\n    const _t = this;","ctx":{"type":"method","constructor":"ObjectObserver","cons":"ObjectObserver","name":"observable","string":"ObjectObserver.prototype.observable()"}},{"tags":[{"type":"type","string":"{ObservableObject}","types":["ObservableObject"],"typesDescription":"<a href=\"ObservableObject.html\">ObservableObject</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":88,"codeStart":89,"code":"let observable;\nconst matches = this.observableList.filter(function(o) {\n    return obj === o.proxy || obj === o.target;\n});\nif (matches.length === 1) {\n    observable = matches[0];\n}\nif (observable == null) {\n    const handler = {","ctx":false},{"tags":[{"type":"type","string":"ObjectObserver","types":["bjectObserve"],"typesDescription":"<a href=\"bjectObserve.html\">bjectObserve</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":98,"codeStart":99,"code":"context: null,\nget: function(target, key) {\n    if (key === 'observableTarget') return target;\n    let value = target[key];\n    if (typeof value === 'undefined') {\n        return;\n    }","ctx":{"type":"property","name":"context","value":"null,","string":"context"}},{"tags":[{"type":"type","string":"{ObservableListener[]}","types":["Array.<ObservableListener>"],"typesDescription":"<code>Array</code>.&lt;<a href=\"ObservableListener.html\">ObservableListener</a>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":106,"codeStart":107,"code":"const listeners = [];\nlet targetObservable = this.context.observable(target);\nif (typeof value === 'object') {","ctx":{"type":"declaration","name":"listeners","value":"[]","string":"listeners"}},{"tags":[{"type":"type","string":"{ObservableObject}","types":["ObservableObject"],"typesDescription":"<a href=\"ObservableObject.html\">ObservableObject</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":110,"codeStart":111,"code":"const valueObservable = this.context.observable(value);\n// link to parent\nif (valueObservable.__parents__.indexOf(targetObservable) === -1) {\n    valueObservable.__parents__.push(targetObservable);\n    valueObservable.__path__ = key;\n}\nlisteners.push(...getListeners(valueObservable));\n// set the return value to the observable value proxy (child)\nvalue = valueObservable.proxy;\n                } else {\nlisteners.push(...getListeners(targetObservable));\n                }\n                const path = getPath(targetObservable) + key;\n                // propagate to all listeners\n                listeners.forEach(function(l) {\nl.get(target, key, value, path);\n                });\n                return value;\n            },\n            set: function(target, key, value) {\n                let old = JSON.parse(JSON.stringify(target));\n                let oldValue = target[key];\n                if (typeof oldValue === 'object') {\ndeleteObservable(this.context.observable(oldValue));\n                }\n                target[key] = value;\n                const targetObservable = this.context.observable(target);\n                const path = getPath(targetObservable) + key;\n                getListeners(targetObservable).forEach(","ctx":{"type":"declaration","name":"valueObservable","value":"this.context.observable(value)","string":"valueObservable"}},{"tags":[{"type":"param","string":"{ObservableListener} l","name":"l","description":"","types":["ObservableListener"],"typesDescription":"<a href=\"ObservableListener.html\">ObservableListener</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":140,"codeStart":141,"code":"function(l) {\n    l.set(target, key, value, path, old);\n}\n                );\n                return true;\n            },\n            deleteProperty: function(target, property) {\n                let value = target[property];\n                if (typeof value === 'object') {\ndeleteObservable(this.context.observable(value));\n                }\n                return delete target[property];\n            }\n        };\n        observable = new ObservableObject(this, obj, handler);\n    }\n    return observable;\n};\nmodule.exports = ObjectObserver;","ctx":{"type":"method","name":"function","string":"function()"}}]