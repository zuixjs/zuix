[{"tags":[],"description":{"full":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst z$ =\n    require('../helpers/ZxQuery');","ctx":false},{"tags":[{"type":"callback","string":"ContextControllerUpdateCallback"},{"type":"param","string":"{Object} target The target object.","name":"target","description":"The target object.","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} key The name of the property.","name":"key","description":"The name of the property.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object} value The value of the property.","name":"value","description":"The value of the property.","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} path The full property path (dotted notation).","name":"path","description":"The full property path (dotted notation).","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object} old The target object before the update.","name":"old","description":"The target object before the update.","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"undefined","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false,"description":"undefined"}],"description":{"full":"Function called when the data model of the component is updated","summary":"Function called when the data model of the component is updated","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":32,"codeStart":43},{"tags":[{"type":"callback","string":"ContextControllerInitCallback"}],"description":{"full":"Function that gets called after loading and before the component is created.","summary":"Function that gets called after loading and before the component is created.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":44,"codeStart":49},{"tags":[{"type":"callback","string":"ContextControllerCreateCallback"}],"description":{"full":"Function that gets called after loading, when the component is actually created and ready.","summary":"Function that gets called after loading, when the component is actually created and ready.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":50,"codeStart":55},{"tags":[{"type":"callback","string":"ContextControllerDestroyCallback"}],"description":{"full":"Function called when the component is destroyed.","summary":"Function called when the component is destroyed.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":56,"codeStart":61},{"tags":[{"type":"param","string":"{ComponentContext} context","name":"context","description":"","types":["ComponentContext"],"typesDescription":"<a href=\"ComponentContext.html\">ComponentContext</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController}","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""},{"type":"constructor","string":""}],"description":{"full":"ContextController constructor.","summary":"ContextController constructor.","body":""},"isPrivate":false,"isConstructor":true,"isClass":false,"isEvent":false,"ignore":false,"line":62,"codeStart":69,"code":"function ContextController(context) {\n    const _t = this;\n\n    this._view = null;\n\n    this.context = context;","ctx":{"type":"constructor","name":"ContextController","string":"ContextController()"}},{"tags":[{"type":"package","string":""},{"type":"type","string":"{!Array.<ZxQuery>}","types":["Array.<ZxQuery>"],"typesDescription":"!<code>Array</code>.&lt;<a href=\"ZxQuery.html\">ZxQuery</a>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":76,"codeStart":80,"code":"this._fieldCache = [];","ctx":{"type":"property","receiver":"this","name":"_fieldCache","value":"[]","string":"this._fieldCache"}},{"tags":[{"type":"protected","string":"","visibility":"protected"},{"type":"type","string":"{!Array.<Element>}","types":["Array.<Element>"],"typesDescription":"!<code>Array</code>.&lt;<code>Element</code>&gt;","optional":false,"nullable":false,"nonNullable":true,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":82,"codeStart":86,"code":"this._childNodes = [];","ctx":{"type":"property","receiver":"this","name":"_childNodes","value":"[]","string":"this._childNodes"}},{"tags":[{"type":"type","string":"{function}","types":["function"],"typesDescription":"<code>function</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":87,"codeStart":88,"code":"this.saveView = function() {\n    this.restoreView();\n    this.view().children().each(function(i, el) {\n        _t._childNodes.push(el);\n    });\n};\nthis.restoreView = function() {\n    if (this._childNodes.length > 0) {\n        _t.view().html('');\n        z$.each(_t._childNodes, function(i, el) {\n            _t.view().append(el);\n        });\n        this._childNodes.length = 0;\n    }\n};\n\nthis.on = function(eventPath, handler) {\n    this.addEvent(eventPath, handler);\n    return this;\n};","ctx":{"type":"method","receiver":"this","name":"saveView","string":"this.saveView()"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":108,"codeStart":109,"code":"this.mapEvent = function(eventMap, target, eventPath, handler) {\n    if (target != null) {\n        target.off(eventPath, this.eventRouter);\n        eventMap[eventPath] = handler;\n        target.on(eventPath, this.eventRouter);\n    } else {\n        // TODO: should report missing target\n    }\n};","ctx":{"type":"method","receiver":"this","name":"mapEvent","string":"this.mapEvent()"}},{"tags":[{"type":"protected","string":"","visibility":"protected"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":118,"codeStart":119,"code":"this.eventRouter = function(e) {\n    const v = _t.view();\n    if (typeof context._behaviorMap[e.type] === 'function') {\n        context._behaviorMap[e.type].call(v, e, e.detail, v);\n    }\n    if (typeof context._eventMap[e.type] === 'function') {\n        context._eventMap[e.type].call(v, e, e.detail, v);\n    }\n    // TODO: else-> should report anomaly\n};\n\n// create event map from context options\nconst options = context.options();\nlet handler = null;\nif (options.on != null) {\n    for (let ep in options.on) {\n        if (options.on.hasOwnProperty(ep)) {\n            handler = options.on[ep];\n            _t.addEvent(ep, handler);\n        }\n    }\n}\n// create behavior map from context options\nif (options.behavior != null) {\n    for (let bp in options.behavior) {\n        if (options.behavior.hasOwnProperty(bp)) {\n            handler = options.behavior[bp];\n            _t.addBehavior(bp, handler);\n        }\n    }\n}\n\ncontext.controller().call(this, this);\n\nreturn this;\n}","ctx":{"type":"method","receiver":"this","name":"eventRouter","string":"this.eventRouter()"}},{"tags":[{"type":"description","string":"If set, this function gets called before component is created and before applying context options.","full":"If set, this function gets called before component is created and before applying context options.","summary":"If set, this function gets called before component is created and before applying context options.","body":""},{"type":"type","string":"{ContextControllerInitCallback}","types":["ContextControllerInitCallback"],"typesDescription":"<a href=\"ContextControllerInitCallback.html\">ContextControllerInitCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"If set, this function gets called before component is created and before applying context options.","summary":"If set, this function gets called before component is created and before applying context options.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":156,"codeStart":160,"code":"ContextController.prototype.init = null;","ctx":{"type":"property","constructor":"ContextController","cons":"ContextController","name":"init","value":"null","string":"ContextController.prototype.init"}},{"tags":[{"type":"description","string":"If set, this function gets called after loading, when the component is created and its view (if provided) is loaded.","full":"If set, this function gets called after loading, when the component is created and its view (if provided) is loaded.","summary":"If set, this function gets called after loading, when the component is created and its view (if provided) is loaded.","body":""},{"type":"type","string":"{ContextControllerCreateCallback}","types":["ContextControllerCreateCallback"],"typesDescription":"<a href=\"ContextControllerCreateCallback.html\">ContextControllerCreateCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"If set, this function gets called after loading, when the component is created and its view (if provided) is loaded.","summary":"If set, this function gets called after loading, when the component is created and its view (if provided) is loaded.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":161,"codeStart":165,"code":"ContextController.prototype.create = null;","ctx":{"type":"property","constructor":"ContextController","cons":"ContextController","name":"create","value":"null","string":"ContextController.prototype.create"}},{"tags":[{"type":"description","string":"If set, this function gets called when the component is destroyed.","full":"If set, this function gets called when the component is destroyed.","summary":"If set, this function gets called when the component is destroyed.","body":""},{"type":"type","string":"{ContextControllerUpdateCallback}","types":["ContextControllerUpdateCallback"],"typesDescription":"<a href=\"ContextControllerUpdateCallback.html\">ContextControllerUpdateCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"If set, this function gets called when the component is destroyed.","summary":"If set, this function gets called when the component is destroyed.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":166,"codeStart":170,"code":"ContextController.prototype.update = null;","ctx":{"type":"property","constructor":"ContextController","cons":"ContextController","name":"update","value":"null","string":"ContextController.prototype.update"}},{"tags":[{"type":"description","string":"If set, this function gets called each time the data model is updated.","full":"If set, this function gets called each time the data model is updated.","summary":"If set, this function gets called each time the data model is updated.","body":""},{"type":"type","string":"{ContextControllerDestroyCallback}","types":["ContextControllerDestroyCallback"],"typesDescription":"<a href=\"ContextControllerDestroyCallback.html\">ContextControllerDestroyCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"If set, this function gets called each time the data model is updated.","summary":"If set, this function gets called each time the data model is updated.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":171,"codeStart":175,"code":"ContextController.prototype.destroy = null;\n\n// TODO: add jsDoc\nContextController.prototype.addEvent = function(eventPath, handler) {\n    this.mapEvent(this.context._eventMap, this.view(), eventPath, handler);\n    return this;\n};\n\n// TODO: add jsDoc\nContextController.prototype.addBehavior = function(eventPath, handler) {\n    this.mapEvent(this.context._behaviorMap, this.view(), eventPath, handler);\n    return this;\n};","ctx":{"type":"property","constructor":"ContextController","cons":"ContextController","name":"destroy","value":"null","string":"ContextController.prototype.destroy"}},{"tags":[{"type":"example","string":"\n<small>**Example - HTML code of the view**</small>\n<pre><code class=\"language-html\">\n<h1 data-ui-field=\"title\">...</h1>\n<p data-ui-field=\"description\">...</p>\n</code></pre>\n\n<small>**Example - JavaScript**</small>\n<pre><code class=\"language-js\">\ncp.field('title')\n  .html('Hello World!');\nvar desc = cp.field('description');\ndesc.html('The spectacle before us was indeed sublime.');\n</code></pre>"},{"type":"param","string":"{!string} fieldName Value to match in the `data-ui-field` attribute.","name":"fieldName","description":"Value to match in the `data-ui-field` attribute.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"return","string":"{ZxQuery} A `{ZxQuery}` object wrapping the matching element.","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"A `{ZxQuery}` object wrapping the matching element."}],"description":{"full":"Gets elements in the component view with `data-ui-field`\nmatching the given `fieldName`.\nThis method implements a caching mechanism and automatic\ndisposal of allocated objects and events.","summary":"Gets elements in the component view with `data-ui-field`\nmatching the given `fieldName`.\nThis method implements a caching mechanism and automatic\ndisposal of allocated objects and events.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":189,"codeStart":215,"code":"ContextController.prototype.field = function(fieldName) {\n    // this method is \"attached\" from Zuix.js on controller initialization\n    return null;\n};\nContextController.prototype.clearCache = function() {\n    this._fieldCache.length = 0;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"field","string":"ContextController.prototype.field()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// get all `checkbox` elements with `.checked` class.\nvar choices = cp.view('input[type=\"checkbox\"].checked');\nchoices.removeClass('.checked');\n// hide the component's view\ncp.view().hide();\n</code></pre>"},{"type":"param","string":"{(string|undefined)} [filter]","name":"[filter]","description":"","types":["string"],"typesDescription":"<code>string</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ZxQuery}","types":["ZxQuery"],"typesDescription":"<a href=\"ZxQuery.html\">ZxQuery</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets the component view or if `filter` argument is passed,\ngets the view elements matching the given `filter`\n(shorthand for `cp.view().find(filter)`).","summary":"Gets the component view or if `filter` argument is passed,\ngets the view elements matching the given `filter`\n(shorthand for `cp.view().find(filter)`).","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":222,"codeStart":241,"code":"ContextController.prototype.view = function(filter) {\n    // context view changed, dispose cached fields from previous attacched view\n    if (this.context.view() != null || this._view !== this.context.view()) {\n        this.clearCache();\n        // TODO: !!!!\n        // TODO: dispose also events on view change (!!!)\n        // TODO: !!!!\n        this._view = z$(this.context.view());\n    }\n    if (filter != null) {\n        return this._view.find(filter);\n    } else if (this._view !== null) {\n        return this._view;\n    } else {\n        throw new Error('Not attached to a view yet.');\n    }\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"view","string":"ContextController.prototype.view()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\nvar m = {\n     title: 'Thoughts',\n     message: 'She stared through the window at the stars.'\n };\ncp.model(m);\ncp.model().title = 'Changes';\nconsole.log(cp.model().title);\n</code></pre>"},{"type":"param","string":"{object|undefined} [model] The model object.","name":"[model]","description":"The model object.","types":["object"],"typesDescription":"<code>object</code>|<code>undefined</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController|object}","types":["ContextController","object"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>|<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Gets/Sets the data model of the component.","summary":"Gets/Sets the data model of the component.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":258,"codeStart":277,"code":"ContextController.prototype.model = function(model) {\n    if (model == null) {\n        return this.context.model();\n    } else this.context.model(model);\n    return this;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"model","string":"ContextController.prototype.model()"}},{"tags":[{"type":"return","string":"{object} The component options.","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The component options."}],"description":{"full":"Gets the component options.","summary":"Gets the component options.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":283,"codeStart":288,"code":"ContextController.prototype.options = function() {\n    return this.context.options();\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"options","string":"ContextController.prototype.options()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// somewhere inside the slide-show component controller\ncp.trigger('slide:change', slideIndex);\n\n// somewhere in a page hosting the slide-show component\n// set component event listeners\nzuix.context('my-slide-show')\n  .on('slide:change', function(slideIndex) { ... })\n  .on(...);\n</code></pre>"},{"type":"param","string":"{string} eventPath The event path.","name":"eventPath","description":"The event path.","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{object} eventData The event data.","name":"eventData","description":"The event data.","types":["object"],"typesDescription":"<code>object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{boolean} [isHook] Trigger as global hook event.","name":"[isHook]","description":"Trigger as global hook event.","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController}","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Triggers the component event `eventPath` with the given\n`eventData` object. To listen to a component event use the\n`{ComponentContext}.on(eventPath, handler)` method or\nin case `isHook` is set to true, use the\n`zuix.hook(eventPath, handler)` method (global hook event).","summary":"Triggers the component event `eventPath` with the given\n`eventData` object. To listen to a component event use the\n`{ComponentContext}.on(eventPath, handler)` method or\nin case `isHook` is set to true, use the\n`zuix.hook(eventPath, handler)` method (global hook event).","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":291,"codeStart":317,"code":"ContextController.prototype.trigger = function(eventPath, eventData, isHook) {\n    if (this.context._eventMap[eventPath] == null && isHook !== true) {\n        this.addEvent(eventPath, null);\n    }\n    // TODO: ...\n    if (isHook === true) {\n        let target = this.context.container();\n        if (target == null) target = this.context.view();\n        if (target != null) {\n            z$(target)\n                .trigger(eventPath, eventData);\n        }\n        this.context.trigger(this.context, eventPath, eventData);\n    } else {\n        this.view().trigger(eventPath, eventData);\n    }\n    return this;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"trigger","string":"ContextController.prototype.trigger()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre data-line=\"5\"><code class=\"language-js\">\n// somewhere in the `create` method of the {ContextController}\nzuix.controller(function(cp){\n  cp.create = function() {\n    // ....\n    cp.expose('setSlide', slide);\n  }\n  // ...\n  function slide(slideIndex) { ... }\n  // ...\n});\n// ...\n// calling the exposed method\n// from the component context\nvar ctx = zuix.context('my-slide-show');\nctx.setSlide(2);\n</code></pre>"},{"type":"param","string":"{string|JSON} methodName Name of the exposed function, or list of method-name/function pairs.","name":"methodName","description":"Name of the exposed function, or list of method-name/function pairs.","types":["string","JSON"],"typesDescription":"<code>string</code>|<a href=\"JSON.html\">JSON</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{function} [handler] Reference to the controller member to expose.","name":"[handler]","description":"Reference to the controller member to expose.","types":["function"],"typesDescription":"<code>function</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController} The `{ContextController}` itself.","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The `{ContextController}` itself."}],"description":{"full":"Exposes a method or property declared in the private\nscope of the controller as a public member of the\ncomponent context object.","summary":"Exposes a method or property declared in the private\nscope of the controller as a public member of the\ncomponent context object.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":335,"codeStart":365,"code":"ContextController.prototype.expose = function(methodName, handler) {\n    if (typeof methodName === 'object') {\n        const _t = this;\n        z$.each(methodName, function(k, v) {\n            _t.context[k] = v;\n        });\n    } else this.context[methodName] = handler;\n    return this;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"expose","string":"ContextController.prototype.expose()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// loads 'path/to/component_name.css' by default\ncp.loadCss();\n// or loads the view css with provided options\ncp.loadCss({\n    path: 'url/of/style/file.css',\n    success: function() { ... },\n    error: function(err) { ... },\n    then: function() { ... }\n});\n</code></pre>"},{"type":"param","string":"{object} [options] The options object.","name":"[options]","description":"The options object.","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController} The ```{ContextController}``` object itself.","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ContextController}``` object itself."}],"description":{"full":"Loads the `.css` file and replace the current view style of the component.\nIf no `options.path` is specified, it will try to load\nthe file with the same base-name as the `componentId`.","summary":"Loads the `.css` file and replace the current view style of the component.\nIf no `options.path` is specified, it will try to load\nthe file with the same base-name as the `componentId`.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":374,"codeStart":397,"code":"ContextController.prototype.loadCss = function(options) {\n    this.context.loadCss(options);\n    return this;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"loadCss","string":"ContextController.prototype.loadCss()"}},{"tags":[{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// loads 'path/to/component_name.html' by default\ncp.loadHtml();\n// or loads the view html with provided options\ncp.loadHtml({\n    path: 'url/of/view/file.html',\n    success: function() { ... },\n    error: function(err) { ... },\n    then: function() { ... }\n});\n</code></pre>"},{"type":"param","string":"{object} [options] The options object.","name":"[options]","description":"The options object.","types":["object"],"typesDescription":"<code>object</code>","optional":true,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{ContextController} The ```{ContextController}``` object itself.","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The ```{ContextController}``` object itself."}],"description":{"full":"Loads the `.html` file and replace the view markup of the component.\nIf no `options.path` is specified, it will try to load the\nfile with the same base-name as the `componentId`.","summary":"Loads the `.html` file and replace the view markup of the component.\nIf no `options.path` is specified, it will try to load the\nfile with the same base-name as the `componentId`.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":401,"codeStart":424,"code":"ContextController.prototype.loadHtml = function(options) {\n    this.saveView();\n    this.context.loadHtml(options);\n    return this;\n};","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"loadHtml","string":"ContextController.prototype.loadHtml()"}},{"tags":[{"type":"description","string":"The component logger instance.","full":"The component logger instance.","summary":"The component logger instance.","body":""},{"type":"example","string":"\n<small>Example - JavaScript</small>\n<pre><code class=\"language-js\">\n// same as log.info (...)\nlog.i('Component view', ctx.view());\n// same as log.error(...)\nlog.e('Error loading data', dataUrl);\n// other methods are:\n// log.w(...) / log.warn (...)\n// log.d(...) / log.debug(...)\n// log.t(...) / log.trace(...)\n</code></pre>"},{"type":"type","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false}],"description":{"full":"The component logger instance.","summary":"The component logger instance.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":429,"codeStart":448,"code":"ContextController.prototype.log = {};","ctx":{"type":"property","constructor":"ContextController","cons":"ContextController","name":"log","value":"{}","string":"ContextController.prototype.log"}},{"tags":[{"type":"example","string":"\n<small>**Example - JavaScript**</small>\n<pre data-line=\"6\"><code class=\"language-js\">\n// Controller of component 'path/to/component_name'\nvar ctrl = zuix.controller(function(cp) {\n    // `cp` is the {ContextController}\n    cp.create = function() { ... };\n    cp.destroy = function() { ... }\n}).for('path/to/component_name');\n</pre></code>"},{"type":"param","string":"{!string} componentId Component identifier.","name":"componentId","description":"Component identifier.","types":["string"],"typesDescription":"!<code>string</code>","optional":false,"nullable":false,"nonNullable":true,"variable":false},{"type":"return","string":"{ContextController} The `{ContextController}` itself.","types":["ContextController"],"typesDescription":"<a href=\"ContextController.html\">ContextController</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":"The `{ContextController}` itself."}],"description":{"full":"Register this one as the default controller\nfor the given component type.","summary":"Register this one as the default controller\nfor the given component type.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":449,"codeStart":468,"code":"ContextController.prototype.for = function(componentId) {\n    // this method is \"attached\" from Zuix.js on controller initialization\n    return this;\n};\n\nmodule.exports = ContextController;","ctx":{"type":"method","constructor":"ContextController","cons":"ContextController","name":"for","string":"ContextController.prototype.for()"}}]