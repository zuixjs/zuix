[{"tags":[],"description":{"full":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.","summary":"Copyright 2015-2019 G-Labs. All Rights Reserved.\n        https://zuixjs.github.io/zuix","body":"Licensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License."},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":1,"codeStart":17},{"tags":[{"type":"author","string":"Generoso Martello <generoso@martello.com>"}],"description":{"full":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","summary":"This file is part of\n zUIx, Javascript library for component-based development.\n       https://zuixjs.github.io/zuix","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":18,"codeStart":27,"code":"'use strict';\n\nconst _console_m = [\n    'log', 'info', 'warn', 'error', 'debug', 'trace', 'dir', 'group',\n    'groupCollapsed', 'groupEnd', 'time', 'timeEnd', 'profile', 'profileEnd',\n    'dirxml', 'assert', 'count', 'markTimeline', 'timeStamp', 'clear'\n];\nconst _bc = 'background-color:rgba(200,200,200,0.2);';\nconst _bt = 'background-color:transparent;';\nconst _c1 = 'color:#8a53ff;';\nconst _c2 = 'color:#777777';\nconst _c3 = 'color:#888888;';\nconst _c_start = 'color:#999900;';\nconst _c_end = 'color:#00aa00;';\nconst _c_end_very_slow = 'color:#ff0000;';\nconst _c_end_slow = 'color:#ff7700;';\n\nlet _console = null;\nlet _global = null;\nlet _callback = null;","ctx":false},{"tags":[{"type":"class","string":"Logger"},{"type":"constructor","string":""}],"description":{"full":"Simple Logging Helper","summary":"Simple Logging Helper","body":""},"isPrivate":false,"isConstructor":true,"isClass":true,"isEvent":false,"ignore":false,"line":48,"codeStart":54,"code":"function Logger(ctx) {\n    _console = window ? window.console : {};\n    _global = window ? window : {};\n    this._timers = {};\n    this.args = function(context, level, args) {\n        let logHeader = '%c '+level+' %c'+(new Date().toISOString())+' %c'+context;\n        const colors = [_bc+_c1, _bc+_c2, _bc+_c3];\n        for (let i = 0; i < args.length; i++) {\n            if (typeof args[i] == 'string' && args[i].indexOf('timer:') === 0) {\n                const t = args[i].split(':');\n                if (t.length === 3) {\n                    let elapsed;\n                    switch (t[2]) {\n                        case 'start':\n                            this._timers[t[1]] = new Date().getTime();\n                            logHeader += ' %cSTART '+t[1];\n                            colors.push(_bc+_c_start);\n                            break;\n                        case 'stop':\n                            elapsed = (new Date().getTime() - this._timers[t[1]]);\n                            logHeader += ' %cSTOP '+t[1]+' '+elapsed+' ms';\n                            if (elapsed > 200) {\n                                colors.push(_bc+_c_end_very_slow);\n                            } else if (elapsed > 100) {\n                                colors.push(_bc+_c_end_slow);\n                            } else {\n                                colors.push(_bc+_c_end);\n                            }\n                            break;\n                    }\n                }\n            }\n        }\n        logHeader += ' \\n%c '; colors.push(_bt+'color:inherit;');\n        // if (typeof args[0] == 'string') {\n        //     logHeader += ' %c' + args[0];\n        //     Array.prototype.shift.call(args);\n        // }\n        for (let c = colors.length-1; c >= 0; c--) {\n            Array.prototype.unshift.call(args, colors[c]);\n        }\n        Array.prototype.unshift.call(args, logHeader);\n        Array.prototype.push.call(args, '\\n\\n');\n    };\n    this.log = function(level, args) {\n        if (typeof _callback === 'function') {\n            _callback.call(ctx, level, args);\n        }\n        // route event\n        if (!_global.zuixNoConsoleOutput) {\n            this.args(ctx, level, args);\n            _console.log.apply(_console, args);\n        }\n    };\n}","ctx":{"type":"constructor","name":"Logger","string":"Logger()"}},{"tags":[{"type":"callback","string":"LoggerMonitorCallback"},{"type":"param","string":"{Object} ctx","name":"ctx","description":"","types":["Object"],"typesDescription":"<code>Object</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{string} level","name":"level","description":"","types":["string"],"typesDescription":"<code>string</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"this","string":"{object}"}],"description":{"full":"Callback function for monitoring all log messages.","summary":"Callback function for monitoring all log messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":110,"codeStart":119},{"tags":[{"type":"param","string":"{LoggerMonitorCallback} callback","name":"callback","description":"","types":["LoggerMonitorCallback"],"typesDescription":"<a href=\"LoggerMonitorCallback.html\">LoggerMonitorCallback</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"undefined","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false,"description":"undefined"}],"description":{"full":"Sets a callback function for monitoring all log messages.","summary":"Sets a callback function for monitoring all log messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":120,"codeStart":126,"code":"Logger.prototype.monitor = function(callback) {\n    // global callback for debugging purpose\n    _callback = callback;\n};","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"monitor","string":"Logger.prototype.monitor()"}},{"tags":[{"type":"param","string":"{boolean} enable","name":"enable","description":"","types":["boolean"],"typesDescription":"<code>boolean</code>","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"undefined","types":[],"typesDescription":"","variable":false,"nonNullable":false,"nullable":false,"optional":false,"description":"undefined"}],"description":{"full":"","summary":"","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":131,"codeStart":136,"code":"Logger.prototype.console = function(enable) {\n    if (enable) {\n        window.console = _console;\n    } else {\n        window.console = {};\n        for (let i = 0; i < _console_m.length; i++) {\n            if (!window.console[_console_m[i]]) {\n                window.console[_console_m[i]] = function() { };\n            }\n        }\n    }\n};","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"console","string":"Logger.prototype.console()"}},{"tags":[{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Logs information messages.","summary":"Logs information messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":149,"codeStart":155,"code":"Logger.prototype.info = function() {\n    this.log('INFO', arguments);\n    return this;\n};\nLogger.prototype.i = Logger.prototype.l = Logger.prototype.log = Logger.prototype.info;","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"info","string":"Logger.prototype.info()"}},{"tags":[{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Logs warning messages.","summary":"Logs warning messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":160,"codeStart":166,"code":"Logger.prototype.warn = function() {\n    this.log('WARN', arguments);\n    return this;\n};\nLogger.prototype.w = Logger.prototype.warn;","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"warn","string":"Logger.prototype.warn()"}},{"tags":[{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Logs error messages.","summary":"Logs error messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":171,"codeStart":177,"code":"Logger.prototype.error = function() {\n    this.log('ERROR', arguments);\n    return this;\n};\nLogger.prototype.e = Logger.prototype.error;","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"error","string":"Logger.prototype.error()"}},{"tags":[{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Logs debug messages.","summary":"Logs debug messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":182,"codeStart":188,"code":"Logger.prototype.debug = function() {\n    this.log('DEBUG', arguments);\n    return this;\n};\nLogger.prototype.d = Logger.prototype.debug;","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"debug","string":"Logger.prototype.debug()"}},{"tags":[{"type":"param","string":"{Object[]} ...args","name":"...args","description":"","types":["Array.<Object>"],"typesDescription":"<code>Array</code>.&lt;<code>Object</code>&gt;","optional":false,"nullable":false,"nonNullable":false,"variable":false},{"type":"return","string":"{Logger}","types":["Logger"],"typesDescription":"<a href=\"Logger.html\">Logger</a>","optional":false,"nullable":false,"nonNullable":false,"variable":false,"description":""}],"description":{"full":"Logs trace messages.","summary":"Logs trace messages.","body":""},"isPrivate":false,"isConstructor":false,"isClass":false,"isEvent":false,"ignore":false,"line":193,"codeStart":199,"code":"Logger.prototype.trace = function() {\n    this.log('TRACE', arguments);\n    return this;\n};\nLogger.prototype.t = Logger.prototype.trace;\n\nmodule.exports = function(ctx) {\n    return new Logger(ctx);\n};","ctx":{"type":"method","constructor":"Logger","cons":"Logger","name":"trace","string":"Logger.prototype.trace()"}}]